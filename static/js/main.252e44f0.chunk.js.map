{"version":3,"sources":["Game.js","Header.js","Message.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","box","_this$props","position","player","handleClick","react_default","a","createElement","className","onClick","Component","Header","defaultOption","currentDifficulty","Fragment","style","color","colorPicker","message","restart","dist_default","options","onChange","val","chooseDifficulty","value","placeholder","href","winConditions","App","setState","currentMove","human","moves","gameOver","difficulty","ai","board","playerMoves","result","i","length","push","forEach","arr","every","elem","indexOf","x","o","tieValue","conditions","move","aiTurn","bestSpot","slice","numMoves","minimax","index","newBoard","availSpots","filter","checkWin","score","bestMove","bestScore","_this2","squares","Game","concat","key","src_Header_0","src_Message","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.252e44f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Square extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      box: ''\n    }\n  }\n\n  render () {\n    const {position, player, handleClick} = this.props\n    return (\n      <div className='square' onClick={() => handleClick(position)}>\n        <div className='square-text'>\n          {typeof player !== 'number' && player}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Square\n","import React, {Component} from 'react'\nimport './Header.css'\nimport Dropdown from 'react-dropdown'\nimport 'react-dropdown/style.css'\n// import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass Header extends Component  {\n\n  colorPicker (state) {\n    if (state === 'Its a tie!') {\n      return 'purple'\n    } else if (state === 'You lose!') {\n      return 'red'\n    } else if (state === 'You win!') {\n      return 'blue'\n    }\n  }\n\n  render() {\n    const difficultyOptions = ['easy', 'medium', 'hard']\n    const defaultOption = this.props.currentDifficulty\n    return (\n      <React.Fragment>\n        <div className='header'>\n          <h1>Unbeatable Tic Tac Toe</h1>\n          <div className='message' style={{color: this.colorPicker(this.props.message)}}>\n            <p>{this.props.message}</p>\n          </div>\n          <button onClick={() => this.props.restart()}>New Game</button>\n          <div className={'difficulty'}>\n            <div className={'difficulty-label'}>\n              <p>Choose Difficulty: </p>\n            </div>\n            <Dropdown\n              className={'difficulty-dropdown'}\n              options={difficultyOptions}\n              onChange={(val) => this.props.chooseDifficulty(val)}\n              value={defaultOption}\n              placeholder=\"Select Difficulty\" />\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Header\n","import React, {Component} from 'react'\nimport './Message.css'\n// import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass message extends Component  {\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className='about'>\n          <h3>Welcome to Unbeatable Tic Tac Toe</h3>\n          <p>\n            This game uses the minimax algorithm to make an artificially\n            intelligent Tic Tac Toe opponent. By analysing every\n            possible move based on the current board state, it is able to give\n            each hypothetical move a score and return the move with the highest\n            score. No matter how good you are at Tic Tac Toe, you can only tie or\n            lose to the AI.\n          </p>\n          <p>\n            Thanks to freeCodeCamp.org for making <a\n            href='https://www.youtube.com/watch?v=P2TcQ3h0ipQ&t=1458s'>this </a>\n            excellent video on how to use the minimax function in javascript. To\n            learn more about minimax check out <a href='https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-1-introduction/'>this </a>\n            article on GeeksForGeeks.\n          </p>\n          <p>\n            If you somehow win, I would love to know about it! Hit me up on <a href='https://www.linkedin.com/in/jesse-gottlieb/'>LinkedIn.</a>\n          </p>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default message\n","import React, { Component } from 'react';\nimport './App.css';\nimport Square from './Game.js'\nimport Header from './Header.js'\nimport Message from './Message.js'\n\nconst winConditions = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6]\n]\n\nclass App extends Component {\n  constructor () {\n    super()\n\n    this.ai = 'o'\n    this.human = 'x'\n\n    this.state = {\n      currentMove: this.human,\n      message: '',\n      gameOver: false,\n      moves: [0,1,2,3,4,5,6,7,8],\n      difficulty: 'easy'\n    }\n  }\n// Check for a game outcome within the context of the minimax function\n  checkWin (board, player) {\n    const playerMoves = []\n    let result = false\n    // populate arrays with all of the current moves for each player\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === player) {\n        playerMoves.push(i)\n      }\n    }\n    // Check for victory of player\n    winConditions.forEach(arr => {\n    if (arr.every(elem => playerMoves.indexOf(elem) > -1)) {\n      result = true\n    }\n  })\n  return result\n  }\n// Check for outcome in the context of the actual game.\n  gameOver () {\n    const moves = this.state.moves\n    const x = []\n    const o = []\n    // populate arrays with all of the current moves for each player\n    for (let i = 0; i < moves.length; i++) {\n      if (moves[i] === this.human) {\n        x.push(i)\n      } else if (moves[i] === this.ai) {\n        o.push(i)\n      }\n    }\n    // analyze tie state.\n    const tieValue = function () {\n      let result = false\n      let val = 0\n      let conditions = 0\n      moves.forEach(move => {\n        if (typeof move !== 'number') {\n          val++\n        }\n      })\n      // search for any win conditions\n      winConditions.forEach(a => {\n        if (a.every(elem => x.indexOf(elem) > -1)) {\n          conditions++\n        }\n      })\n      // if no win conditions are met and the board is full it is a tie game\n      if (conditions === 0 && val === 9)\n        result = true\n      return result\n    }\n    // use hard-coded winConditions array to check outcome\n    let i = 0\n    while (!this.state.gameOver && i < winConditions.length) {\n      // Check for victory\n    if (winConditions[i].every(elem => x.indexOf(elem) > -1)) {\n      this.setState({\n        message: 'You win!',\n        gameOver: true\n      })\n      // check for defeat\n    } else if (winConditions[i].every(elem => o.indexOf(elem) > -1)) {\n      this.setState({\n        message: 'You lose!',\n        gameOver: true\n      })\n    }\n    else if (tieValue()) {\n      this.setState({\n        message: 'Its a tie!',\n        gameOver: true\n      })\n    }\n    i++\n  }\n  }\n// Handle a click inside the game board.\nhandleClick (position) {\n  // Allow a move if the space isn't occupied and the game isn't over\n  if (!this.state.gameOver) {\n    if (typeof this.state.moves[position] === 'number') {\n      const arr = this.state.moves\n      arr[position] = this.human\n      this.setState({moves: arr})\n      this.gameOver()\n      this.aiTurn(this.bestSpot())\n      this.gameOver()\n    } else {\n      this.setState({ message: 'Someone already went there!'})\n    }\n  }\n}\n// Call minimax function using the current board state\nbestSpot () {\n  const moves = this.state.moves.slice(0)\n  let numMoves = 0\n  moves.forEach(a => typeof a !== 'number' ? numMoves++ : '')\n  return this.minimax(moves, this.ai, numMoves).index\n}\n// set the state to reflect the new ai move\naiTurn (bestSpot) {\n  const arr = this.state.moves\n  arr[bestSpot] = this.ai\n  this.setState({moves: arr})\n}\n\n// randomMove () {\n//   const availSpots = []\n//   this.state.moves.forEach((a, i) => {\n//     if (typeof a === 'number')\n//       availSpots.push(i)\n//   })\n//   const randomIndex = Math.floor(Math.random() * availSpots.length)\n//   return availSpots[randomIndex]\n// }\n// recursive function to find the best possible AI move given the current state of the board.\nminimax (newBoard, player, numMoves) {\n  // get available spots\n\tconst availSpots = newBoard.filter(a => typeof a === 'number')\n  // if human player wins this round return -10\n\tif (this.checkWin(newBoard, this.human)) {\n    if (this.state.difficulty === 'easy') {\n\t\t  return {score: 10};\n    } else if (this.state.difficulty === 'hard') {\n      return {score: -10}\n    } else if (this.state.difficulty === 'medium' && numMoves < 4) {\n      return {score: -10}\n    } else if (this.state.difficulty === 'medium' && numMoves >= 4) {\n      return {score: 10}\n    }\n\t} else if (this.checkWin(newBoard, this.ai)) {\n    if (this.state.difficulty === 'easy') {\n\t\t  return {score: -10};\n    } else if (this.state.difficulty === 'hard' || this.state.difficulty === 'medium') {\n      return {score: 10}\n    } else if (this.state.difficulty === 'medium' && numMoves < 4) {\n      return {score: 10}\n    } else if (this.state.difficulty === 'medium' && numMoves >= 4) {\n      return {score: -10}\n    }\n\t} else if (availSpots.length === 0) {\n\t\treturn {score: 0};\n\t}\n  // save all hypothetical moves\n\tconst moves = [];\n  // loop through available spots\n\tfor (let i = 0; i < availSpots.length; i++) {\n    // save current move enumeration\n\t\tconst move = {};\n    // save index of current move\n\t\tmove.index = newBoard[availSpots[i]];\n    // apply the current player's letter to that index\n\t\tnewBoard[availSpots[i]] = player;\n    // if human player, recursively call this function with ai player\n\t\tif (player === this.human) {\n\t\t\tconst result = this.minimax(newBoard, this.ai, numMoves);\n      // give this move a score\n\t\t\tmove.score = result.score;\n\t\t} else {\n      // if ai player, recursively call this function with human player\n\t\t\tconst result = this.minimax(newBoard, this.human, numMoves);\n\t\t\tmove.score = result.score;\n\t\t}\n    // remove the player letter applied to the current index of this enumeration\n\t\tnewBoard[availSpots[i]] = move.index;\n    // push the current move to the moves array\n\t\tmoves.push(move);\n\t}\n\n\tlet bestMove\n  // find which move received the best score\n\tif(player === this.ai) {\n\t\tlet bestScore = -10000;\n\t\tfor(let i = 0; i < moves.length; i++) {\n\t\t\tif (moves[i].score > bestScore) {\n\t\t\t\tbestScore = moves[i].score;\n\t\t\t\tbestMove = i;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tlet bestScore = 10000;\n\t\tfor(let i = 0; i < moves.length; i++) {\n\t\t\tif (moves[i].score < bestScore) {\n\t\t\t\tbestScore = moves[i].score;\n\t\t\t\tbestMove = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn moves[bestMove];\n}\n// reset the board to start a new game\nrestart = () => {\n  this.setState({\n    currentMove: this.human,\n    moves: [0,1,2,3,4,5,6,7,8],\n    message: '',\n    gameOver: false\n  })\n}\n\nchooseDifficulty = (difficulty) => {\n  this.setState({\n    difficulty: difficulty.value\n  })\n}\n\n  render() {\n    const squares = []\n    // create a gameboard\n    for (var i = 0; i < 9; i++) {\n      squares.push(<Square\n        player={this.state.moves[`${i}`]}\n        handleClick={(i) => this.handleClick(i)}\n        key={i}\n        position={i}\n        />)\n    }\n    return (\n      <React.Fragment>\n      <main>\n        <Header\n          message={this.state.message}\n          restart={this.restart}\n          chooseDifficulty={this.chooseDifficulty}\n          currentDifficulty={this.state.difficulty}/>\n        <div className='container'>\n          <div className='gameboard'>\n            {squares}\n          </div>\n          <Message />\n        </div>\n      </main>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}