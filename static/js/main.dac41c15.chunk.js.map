{"version":3,"sources":["Game.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","box","_this$props","position","player","handleClick","react_default","a","createElement","className","onClick","Component","Header","Fragment","style","color","colorPicker","message","restart","winConditions","App","setState","currentMove","human","moves","gameOver","ai","board","playerMoves","result","i","length","push","forEach","arr","every","elem","indexOf","_this2","x","o","val","move","tieValue","aiTurn","bestSpot","slice","filter","minimax","index","newBoard","availSpots","checkWin","score","bestMove","bestScore","_this3","squares","Game","concat","key","src_Header_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dac41c15.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Square extends Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      box: ''\n    }\n  }\n\n  render () {\n    const {position, player, handleClick} = this.props\n    return (\n      <div className='square' onClick={() => handleClick(position)}>\n        <div className='square-text'>\n          {typeof player !== 'number' && player}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Square\n","import React, {Component} from 'react'\nimport './Header.css'\n// import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass Header extends Component  {\n\n  colorPicker (state) {\n    if (state === 'Its a tie!') {\n      return 'purple'\n    } else if (state === 'You lose!') {\n      return 'red'\n    } else if (state === 'You win!') {\n      return 'blue'\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className='header'>\n          <h1>Tic Tac Toe</h1>\n          <div className='message' style={{color: this.colorPicker(this.props.message)}}>\n            <p>{this.props.message}</p>\n          </div>\n          <button onClick={() => this.props.restart()}>New Game</button>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Header\n","import React, { Component } from 'react';\nimport './App.css';\nimport Square from './Game.js'\nimport Header from './Header.js'\n\nconst winConditions = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6]\n]\n\nclass App extends Component {\n  constructor () {\n    super()\n\n    this.ai = 'o'\n    this.human = 'x'\n\n    this.state = {\n      currentMove: this.human,\n      message: '',\n      gameOver: false,\n      moves: [0,1,2,3,4,5,6,7,8]\n    }\n  }\n\n  checkWin (board, player) {\n    const playerMoves = []\n    let result = false\n    // populate arrays with all of the current moves for each player\n    for (let i = 0; i < board.length; i++) {\n      if (board[i] === player) {\n        playerMoves.push(i)\n      }\n    }\n    // Check for victory of player\n    winConditions.forEach(arr => {\n    if (arr.every(elem => playerMoves.indexOf(elem) > -1)) {\n      result = true\n    }\n  })\n  return result\n  }\n\n  gameOver () {\n    const moves = this.state.moves\n    const x = []\n    const o = []\n    // tieValue is just the number of moves that have been made so far.\n    const tieValue = function () {\n      let val = 0\n      moves.forEach(move => {\n        if (typeof move !== 'number') {\n          val++\n        }\n      })\n      return val\n    }\n    // populate arrays with all of the current moves for each player\n    for (let i = 0; i < moves.length; i++) {\n      if (moves[i] === this.human) {\n        x.push(i)\n      } else if (moves[i] === this.ai) {\n        o.push(i)\n      }\n    }\n    // Check for victory\n    winConditions.forEach(arr => {\n      // check for defeat\n    if (arr.every(elem => x.indexOf(elem) > -1)) {\n      this.setState({\n        message: 'You win!',\n        gameOver: true\n      })\n    } else if (arr.every(elem => o.indexOf(elem) > -1)) {\n      this.setState({\n        message: 'You lose!',\n        gameOver: true\n      })\n      // check for tie\n    } else if (tieValue() === 9) {\n      this.setState({\n        message: 'Its a tie!',\n        gameOver: true\n      })\n    }\n  })\n  }\n\nhandleClick (position) {\n  if (!this.state.gameOver) {\n    if (typeof this.state.moves[position] === 'number') {\n      const arr = this.state.moves\n      arr[position] = this.human\n      this.setState({moves: arr})\n    } else {\n      this.setState({ message: 'Someone already went there!'})\n    }\n    this.gameOver()\n    this.aiTurn(this.bestSpot())\n    this.gameOver()\n  }\n}\n\nemptySquares () {\n  const moves = this.state.moves.slice(0)\n  return moves.filter(a => typeof a === 'number')\n}\n\nbestSpot () {\n  const moves = this.state.moves.slice(0)\n  return this.minimax(moves, this.ai).index\n}\n\naiTurn (bestSpot) {\n  const arr = this.state.moves\n  arr[bestSpot] = this.ai\n  this.setState({moves: arr})\n}\n\nminimax (newBoard, player) {\n  // get available spots\n\tconst availSpots = newBoard.filter(a => typeof a === 'number')\n  // if human player wins this round return -10\n\tif (this.checkWin(newBoard, this.human)) {\n\t\treturn {score: -10};\n\t} else if (this.checkWin(newBoard, this.ai)) {\n\t\treturn {score: 10};\n\t} else if (availSpots.length === 0) {\n\t\treturn {score: 0};\n\t}\n  // save all hypothetical moves\n\tconst moves = [];\n  // loop through available spots\n\tfor (let i = 0; i < availSpots.length; i++) {\n    // save current move enumeration\n\t\tconst move = {};\n    // save index of current move\n\t\tmove.index = newBoard[availSpots[i]];\n    // apply the current player's letter to that index\n\t\tnewBoard[availSpots[i]] = player;\n    // if human player, recursively call this function with ai player\n\t\tif (player === this.human) {\n\t\t\tconst result = this.minimax(newBoard, this.ai);\n      // give this move a score\n\t\t\tmove.score = result.score;\n\t\t} else {\n      // if ai player, recursively call this function with human player\n\t\t\tconst result = this.minimax(newBoard, this.human);\n\t\t\tmove.score = result.score;\n\t\t}\n    // remove the player letter applied to the current index of this enumeration\n\t\tnewBoard[availSpots[i]] = move.index;\n    // push the current move to the moves array\n\t\tmoves.push(move);\n\t}\n\n\tlet bestMove\n  // find which move received the best score\n\tif(player === this.ai) {\n\t\tlet bestScore = -10000;\n\t\tfor(let i = 0; i < moves.length; i++) {\n\t\t\tif (moves[i].score > bestScore) {\n\t\t\t\tbestScore = moves[i].score;\n\t\t\t\tbestMove = i;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tlet bestScore = 10000;\n\t\tfor(let i = 0; i < moves.length; i++) {\n\t\t\tif (moves[i].score < bestScore) {\n\t\t\t\tbestScore = moves[i].score;\n\t\t\t\tbestMove = i;\n\t\t\t}\n\t\t}\n\t}\n\treturn moves[bestMove];\n}\n\nrestart = () => {\n  this.setState({\n    currentMove: this.human,\n    moves: [0,1,2,3,4,5,6,7,8],\n    message: '',\n    gameOver: false\n  })\n}\n\n  render() {\n    const squares = []\n    for (var i = 0; i < 9; i++) {\n      squares.push(<Square\n        player={this.state.moves[`${i}`]}\n        handleClick={(i) => this.handleClick(i)}\n        key={i}\n        position={i}\n        />)\n    }\n    return (\n      <React.Fragment>\n      <main>\n        <Header message={this.state.message} restart={this.restart}/>\n        <div className='container'>\n          <div className='gameboard'>\n            {squares}\n          </div>\n        </div>\n      </main>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}